REM   Script: DM1_SQL_SCRIPT
REM   The script contains the queries for the implementation of a data warehouse for a customer orders star schema as well as the relevant queries that demonstrates my ability to work with models, materialised views, cube, rollup and over within sql.

DROP TABLE PRODUCT_SALES;

DROP TABLE CUSTOMERS;

DROP TABLE STORES;

DROP TABLE PRODUCTS;

DROP TABLE ORDER_DETAILS;

DROP MATERIALIZED VIEW EXTENDED_ORDER_DETAILS;

create table CUSTOMERS(  
CUSTOMER_ID number GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, 
EMAIL VARCHAR2(150) NOT NULL,  
FULL_NAME VARCHAR2(150) UNIQUE NOT NULL, 
CONSTRAINT PK_CUSTOMER_ID_int PRIMARY KEY ( CUSTOMER_ID ));

INSERT INTO customers(FULL_NAME,EMAIL) VALUES ('Christopher Reynolds','ChristopherReynolds@gmail.com');

INSERT INTO customers(FULL_NAME,EMAIL) VALUES ('Meagan Alexander','MeaganAlexander@gmail.com');

INSERT INTO customers(FULL_NAME,EMAIL) VALUES ('Robert Phillips','RobertPhillips@gmail.com');

INSERT INTO customers(FULL_NAME,EMAIL) VALUES ('Erin Fernandez','ErinFernandez@gmail.com');

INSERT INTO customers(FULL_NAME,EMAIL) VALUES ('Briana Byrd','BrianaByrd@gmail.com');

INSERT INTO customers(FULL_NAME,EMAIL) VALUES ('Jennifer Love','JenniferLove@gmail.com');

create table PRODUCTS(  
PRODUCT_ID number NOT NULL, 
PRODUCT_NAME VARCHAR2(100) NOT NULL,  
UNIT_PRICE NUMBER(10,2) NOT NULL, 
PRODUCT_DETAILS VARCHAR2(500) NOT NULL, 
CONSTRAINT PK_PRODUCT_ID_int PRIMARY KEY ( PRODUCT_ID ));

INSERT INTO PRODUCTS(PRODUCT_ID,PRODUCT_NAME,UNIT_PRICE,PRODUCT_DETAILS) VALUES ( 3615140 ,'Coffe Table',2000.0,'Sleek coffee table made of maple wood.');

INSERT INTO PRODUCTS(PRODUCT_ID,PRODUCT_NAME,UNIT_PRICE,PRODUCT_DETAILS) VALUES ( 4568925,'Dining Table Set',15000,'Everything your life needs including a bulter.');

INSERT INTO PRODUCTS(PRODUCT_ID,PRODUCT_NAME,UNIT_PRICE,PRODUCT_DETAILS) VALUES ( 2544678 ,'Chair',3300,'Its a chair.');

INSERT INTO PRODUCTS(PRODUCT_ID,PRODUCT_NAME,UNIT_PRICE,PRODUCT_DETAILS) VALUES ( 2678011 ,'Sofa',2900,'Blue sofa that will make family time even better.');

INSERT INTO PRODUCTS(PRODUCT_ID,PRODUCT_NAME,UNIT_PRICE,PRODUCT_DETAILS) VALUES ( 4456324 ,'Table',10009,'Table made of gondorian wood.');

create table STORES( 
STORE_ID number NOT NULL, 
STORE_NAME VARCHAR2(100) NOT NULL,  
WEB_ADDRESS VARCHAR2(500) NOT NULL, 
PHYSICAL_ADDRESS VARCHAR2(500) NOT NULL, 
CONSTRAINT PK_STORE_ID_int PRIMARY KEY ( STORE_ID ));

INSERT INTO stores(STORE_ID,STORE_NAME,WEB_ADDRESS,PHYSICAL_ADDRESS) VALUES (13000,'hardwood furniture shop Kashyyyk', 'www.hfskash.com','Kashyyyk');

INSERT INTO stores(STORE_ID,STORE_NAME,WEB_ADDRESS,PHYSICAL_ADDRESS) VALUES (10000,'hardwood furniture shop Tatooine', 'www.hfstato.com','Tatooine');

INSERT INTO stores(STORE_ID,STORE_NAME,WEB_ADDRESS,PHYSICAL_ADDRESS) VALUES (50000,'hardwood furniture shop Coruscant', 'www.hfscor.com','Coruscant');

CREATE TABLE ORDER_DETAILS( 
ORDER_ID number GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL, 
ORDER_DATETIME timestamp with local time zone default on null localtimestamp, 
ORDER_STATUS VARCHAR(10), 
CONSTRAINT PK_ORDER_ID_INT PRIMARY KEY ( ORDER_ID ), 
CONSTRAINT CHK_ORDER_STATUS CHECK  (ORDER_STATUS IN ('OPEN','PAID','SHIPPED','COMPLETE','CANCELED','REFUNDED')) 
);

INSERT INTO ORDER_DETAILS(ORDER_STATUS) VALUES ('OPEN');

INSERT INTO ORDER_DETAILS(ORDER_STATUS) VALUES ('PAID');

INSERT INTO ORDER_DETAILS(ORDER_STATUS) VALUES ('SHIPPED');

INSERT INTO ORDER_DETAILS(ORDER_STATUS) VALUES ('CANCELED');

INSERT INTO ORDER_DETAILS(ORDER_STATUS) VALUES ('REFUNDED');

INSERT INTO ORDER_DETAILS(ORDER_STATUS) VALUES ('PAID');

INSERT INTO ORDER_DETAILS(ORDER_STATUS) VALUES ('SHIPPED');

INSERT INTO ORDER_DETAILS(ORDER_STATUS) VALUES ('SHIPPED');

INSERT INTO ORDER_DETAILS(ORDER_STATUS) VALUES ('COMPLETE');

CREATE TABLE PRODUCT_SALES( 
PRODUCT_ID NUMBER NOT NULL, 
PRODUCT_QUANTITY NUMBER NOT NULL, 
UNIT_PRICE NUMBER(10,2) NOT NULL, 
ORDER_ID NUMBER NOT NULL, 
CUSTOMER_ID NUMBER NOT NULL, 
STORE_ID NUMBER NOT NULL, 
CONSTRAINT FK_ORDER_PRODUCT_ID_int FOREIGN KEY ( PRODUCT_ID )  REFERENCES products (PRODUCT_ID), 
CONSTRAINT FK_ORDER_ID_int FOREIGN KEY ( ORDER_ID )  REFERENCES ORDER_DETAILS (ORDER_ID), 
CONSTRAINT FK_CUSTOMER_ID_int FOREIGN KEY ( CUSTOMER_ID )  REFERENCES CUSTOMERS (CUSTOMER_ID), 
CONSTRAINT FK_STORE_ID_int FOREIGN KEY ( STORE_ID )  REFERENCES STORES (STORE_ID) 
);

INSERT INTO PRODUCT_SALES(PRODUCT_ID,ORDER_ID,CUSTOMER_ID,STORE_ID,UNIT_PRICE,PRODUCT_QUANTITY) VALUES ((SELECT PRODUCT_ID FROM PRODUCTS WHERE PRODUCT_ID=3615140),(SELECT ORDER_ID FROM ORDER_DETAILS WHERE ORDER_ID=1),(SELECT CUSTOMER_ID FROM CUSTOMERS WHERE CUSTOMER_ID=3),(SELECT STORE_ID FROM STORES WHERE STORE_ID=13000),(SELECT UNIT_PRICE FROM PRODUCTS WHERE PRODUCT_ID=3615140),1);

INSERT INTO PRODUCT_SALES(PRODUCT_ID,ORDER_ID,CUSTOMER_ID,STORE_ID,UNIT_PRICE,PRODUCT_QUANTITY) VALUES ((SELECT PRODUCT_ID FROM PRODUCTS WHERE PRODUCT_ID=4568925),(SELECT ORDER_ID FROM ORDER_DETAILS WHERE ORDER_ID=2),(SELECT CUSTOMER_ID FROM CUSTOMERS WHERE CUSTOMER_ID=5),(SELECT STORE_ID FROM STORES WHERE STORE_ID=50000),(SELECT UNIT_PRICE FROM PRODUCTS WHERE PRODUCT_ID=4568925),1);

INSERT INTO PRODUCT_SALES(PRODUCT_ID,ORDER_ID,CUSTOMER_ID,STORE_ID,UNIT_PRICE,PRODUCT_QUANTITY) VALUES ((SELECT PRODUCT_ID FROM PRODUCTS WHERE PRODUCT_ID=2544678),(SELECT ORDER_ID FROM ORDER_DETAILS WHERE ORDER_ID=2),(SELECT CUSTOMER_ID FROM CUSTOMERS WHERE CUSTOMER_ID=5),(SELECT STORE_ID FROM STORES WHERE STORE_ID=50000),(SELECT UNIT_PRICE FROM PRODUCTS WHERE PRODUCT_ID=2544678),3);

INSERT INTO PRODUCT_SALES(PRODUCT_ID,ORDER_ID,CUSTOMER_ID,STORE_ID,UNIT_PRICE,PRODUCT_QUANTITY) VALUES ((SELECT PRODUCT_ID FROM PRODUCTS WHERE PRODUCT_ID=3615140),(SELECT ORDER_ID FROM ORDER_DETAILS WHERE ORDER_ID=3),(SELECT CUSTOMER_ID FROM CUSTOMERS WHERE CUSTOMER_ID=6),(SELECT STORE_ID FROM STORES WHERE STORE_ID=10000),(SELECT UNIT_PRICE FROM PRODUCTS WHERE PRODUCT_ID=3615140),1);

INSERT INTO PRODUCT_SALES(PRODUCT_ID,ORDER_ID,CUSTOMER_ID,STORE_ID,UNIT_PRICE,PRODUCT_QUANTITY) VALUES ((SELECT PRODUCT_ID FROM PRODUCTS WHERE PRODUCT_ID=4568925),(SELECT ORDER_ID FROM ORDER_DETAILS WHERE ORDER_ID=4),(SELECT CUSTOMER_ID FROM CUSTOMERS WHERE CUSTOMER_ID=2),(SELECT STORE_ID FROM STORES WHERE STORE_ID=13000),(SELECT UNIT_PRICE FROM PRODUCTS WHERE PRODUCT_ID=4568925),1);

INSERT INTO PRODUCT_SALES(PRODUCT_ID,ORDER_ID,CUSTOMER_ID,STORE_ID,UNIT_PRICE,PRODUCT_QUANTITY) VALUES ((SELECT PRODUCT_ID FROM PRODUCTS WHERE PRODUCT_ID=3615140),(SELECT ORDER_ID FROM ORDER_DETAILS WHERE ORDER_ID=5),(SELECT CUSTOMER_ID FROM CUSTOMERS WHERE CUSTOMER_ID=1),(SELECT STORE_ID FROM STORES WHERE STORE_ID=13000),(SELECT UNIT_PRICE FROM PRODUCTS WHERE PRODUCT_ID=3615140),2);

INSERT INTO PRODUCT_SALES(PRODUCT_ID,ORDER_ID,CUSTOMER_ID,STORE_ID,UNIT_PRICE,PRODUCT_QUANTITY) VALUES ((SELECT PRODUCT_ID FROM PRODUCTS WHERE PRODUCT_ID=4568925),(SELECT ORDER_ID FROM ORDER_DETAILS WHERE ORDER_ID=6),(SELECT CUSTOMER_ID FROM CUSTOMERS WHERE CUSTOMER_ID=4),(SELECT STORE_ID FROM STORES WHERE STORE_ID=10000),(SELECT UNIT_PRICE FROM PRODUCTS WHERE PRODUCT_ID=4568925),1);

INSERT INTO PRODUCT_SALES(PRODUCT_ID,ORDER_ID,CUSTOMER_ID,STORE_ID,UNIT_PRICE,PRODUCT_QUANTITY) VALUES ((SELECT PRODUCT_ID FROM PRODUCTS WHERE PRODUCT_ID=4456324),(SELECT ORDER_ID FROM ORDER_DETAILS WHERE ORDER_ID=7),(SELECT CUSTOMER_ID FROM CUSTOMERS WHERE CUSTOMER_ID=2),(SELECT STORE_ID FROM STORES WHERE STORE_ID=13000),(SELECT UNIT_PRICE FROM PRODUCTS WHERE PRODUCT_ID=4456324),4);

INSERT INTO PRODUCT_SALES(PRODUCT_ID,ORDER_ID,CUSTOMER_ID,STORE_ID,UNIT_PRICE,PRODUCT_QUANTITY) VALUES ((SELECT PRODUCT_ID FROM PRODUCTS WHERE PRODUCT_ID=4568925),(SELECT ORDER_ID FROM ORDER_DETAILS WHERE ORDER_ID=7),(SELECT CUSTOMER_ID FROM CUSTOMERS WHERE CUSTOMER_ID=2),(SELECT STORE_ID FROM STORES WHERE STORE_ID=13000),(SELECT UNIT_PRICE FROM PRODUCTS WHERE PRODUCT_ID=4568925),1);

INSERT INTO PRODUCT_SALES(PRODUCT_ID,ORDER_ID,CUSTOMER_ID,STORE_ID,UNIT_PRICE,PRODUCT_QUANTITY) VALUES ((SELECT PRODUCT_ID FROM PRODUCTS WHERE PRODUCT_ID=3615140),(SELECT ORDER_ID FROM ORDER_DETAILS WHERE ORDER_ID=8),(SELECT CUSTOMER_ID FROM CUSTOMERS WHERE CUSTOMER_ID=4),(SELECT STORE_ID FROM STORES WHERE STORE_ID=13000),(SELECT UNIT_PRICE FROM PRODUCTS WHERE PRODUCT_ID=3615140),1);

INSERT INTO PRODUCT_SALES(PRODUCT_ID,ORDER_ID,CUSTOMER_ID,STORE_ID,UNIT_PRICE,PRODUCT_QUANTITY) VALUES ((SELECT PRODUCT_ID FROM PRODUCTS WHERE PRODUCT_ID=4568925),(SELECT ORDER_ID FROM ORDER_DETAILS WHERE ORDER_ID=8),(SELECT CUSTOMER_ID FROM CUSTOMERS WHERE CUSTOMER_ID=4),(SELECT STORE_ID FROM STORES WHERE STORE_ID=13000),(SELECT UNIT_PRICE FROM PRODUCTS WHERE PRODUCT_ID=4568925),3);

INSERT INTO PRODUCT_SALES(PRODUCT_ID,ORDER_ID,CUSTOMER_ID,STORE_ID,UNIT_PRICE,PRODUCT_QUANTITY) VALUES ((SELECT PRODUCT_ID FROM PRODUCTS WHERE PRODUCT_ID=2678011),(SELECT ORDER_ID FROM ORDER_DETAILS WHERE ORDER_ID=9),(SELECT CUSTOMER_ID FROM CUSTOMERS WHERE CUSTOMER_ID=1),(SELECT STORE_ID FROM STORES WHERE STORE_ID=10000),(SELECT UNIT_PRICE FROM PRODUCTS WHERE PRODUCT_ID=2678011),1);

INSERT INTO PRODUCT_SALES(PRODUCT_ID,ORDER_ID,CUSTOMER_ID,STORE_ID,UNIT_PRICE,PRODUCT_QUANTITY) VALUES ((SELECT PRODUCT_ID FROM PRODUCTS WHERE PRODUCT_ID=2544678),(SELECT ORDER_ID FROM ORDER_DETAILS WHERE ORDER_ID=9),(SELECT CUSTOMER_ID FROM CUSTOMERS WHERE CUSTOMER_ID=1),(SELECT STORE_ID FROM STORES WHERE STORE_ID=10000),(SELECT UNIT_PRICE FROM PRODUCTS WHERE PRODUCT_ID=2544678),1);

INSERT INTO PRODUCT_SALES(PRODUCT_ID,ORDER_ID,CUSTOMER_ID,STORE_ID,UNIT_PRICE,PRODUCT_QUANTITY) VALUES ((SELECT PRODUCT_ID FROM PRODUCTS WHERE PRODUCT_ID=3615140),(SELECT ORDER_ID FROM ORDER_DETAILS WHERE ORDER_ID=9),(SELECT CUSTOMER_ID FROM CUSTOMERS WHERE CUSTOMER_ID=1),(SELECT STORE_ID FROM STORES WHERE STORE_ID=10000),(SELECT UNIT_PRICE FROM PRODUCTS WHERE PRODUCT_ID=3615140),2);

CREATE MATERIALIZED VIEW EXTENDED_ORDER_DETAILS 
REFRESH FORCE 
ON DEMAND 
AS 
SELECT  ORDER_DETAILS.ORDER_ID,ORDER_DETAILS.CUSTOMER_ID,ORDER_DETAILS.STORE_ID,ORDER_DETAILS.PHYSICAL_ADDRESS STORE_ADDRESS,ORDER_DETAILS.ORDER_STATUS, ORDER_METRIC_DETAILS.TOTAL_PRO_QUANTITY, ORDER_METRIC_DETAILS.TOTAL_VALUE  
FROM 
(SELECT DISTINCT PS.ORDER_ID,PS.CUSTOMER_ID,PS.STORE_ID,S.PHYSICAL_ADDRESS,OD.ORDER_STATUS FROM PRODUCT_SALES PS, STORES S, ORDER_DETAILS OD WHERE PS.ORDER_ID=OD.ORDER_ID AND PS.STORE_ID= S.STORE_ID ) ORDER_DETAILS 
JOIN 
(SELECT PS.ORDER_ID, SUM(PS.PRODUCT_QUANTITY) TOTAL_PRO_QUANTITY,SUM(PS.PRODUCT_QUANTITY*PS.UNIT_PRICE) TOTAL_VALUE FROM PRODUCT_SALES PS GROUP BY PS.ORDER_ID) ORDER_METRIC_DETAILS 
ON  
ORDER_DETAILS.ORDER_ID=ORDER_METRIC_DETAILS.ORDER_ID;

CREATE MATERIALIZED VIEW MOST_RECENT_CUSTOMER_ORDER 
REFRESH FORCE 
ON DEMAND 
AS 
SELECT EOD.CUSTOMER_ID, MAX(OD.ORDER_DATETIME) FROM ORDER_DETAILS OD, EXTENDED_ORDER_DETAILS EOD WHERE  OD.ORDER_ID=EOD.ORDER_ID GROUP BY CUSTOMER_ID;

SELECT PRODUCT_NAME,UNIT_PRICE FROM PRODUCTS;

SELECT PRODUCT_NAME,UNIT_PRICE,PROFIT_MARGIN,INCOME FROM PRODUCTS 
MODEL 
    DIMENSION BY(PRODUCT_NAME) 
    MEASURES (UNIT_PRICE,0 PROFIT_MARGIN,0 INCOME) 
    IGNORE NAV 
    UNIQUE DIMENSION 
    RULES UPSERT SEQUENTIAL ORDER( 
    PROFIT_MARGIN['Chair']=0.1, 
    INCOME['Chair']=PROFIT_MARGIN['Chair']*UNIT_PRICE['Chair'], 
    PROFIT_MARGIN['Coffe Table']=0.3, 
    INCOME['Coffe Table']=PROFIT_MARGIN['Coffe Table']*UNIT_PRICE['Coffe Table'], 
    PROFIT_MARGIN['Dining Table Set']=0.5, 
    INCOME['Dining Table Set']=PROFIT_MARGIN['Dining Table Set']*UNIT_PRICE['Dining Table Set'], 
    PROFIT_MARGIN['Sofa']=0.8, 
    INCOME['Sofa']=PROFIT_MARGIN['Sofa']*UNIT_PRICE['Sofa'], 
    PROFIT_MARGIN['Table']=0.6, 
    INCOME['Table']=PROFIT_MARGIN['Table']*UNIT_PRICE['Table'] 
    ) 
ORDER BY PRODUCT_NAME;

SELECT STORE_ADDRESS,PRODUCT_NAME,PROFIT_PER_PRODUCT,CPROFIT FROM  
(SELECT EOD.STORE_ADDRESS,PRO.PRODUCT_NAME,SUM(PS.UNIT_PRICE*PS.PRODUCT_QUANTITY) AS PROFIT_PER_PRODUCT FROM PRODUCT_SALES PS, PRODUCTS PRO, EXTENDED_ORDER_DETAILS EOD 
WHERE PS.PRODUCT_ID=PRO.PRODUCT_ID AND PS.ORDER_ID=EOD.ORDER_ID GROUP BY(PRO.PRODUCT_NAME,EOD.STORE_ADDRESS)) 
MODEL 
    DIMENSION BY(STORE_ADDRESS,PRODUCT_NAME) 
    MEASURES (PROFIT_PER_PRODUCT, 0 CPROFIT) 
    RULES(CPROFIT[ANY,ANY] =SUM(PROFIT_PER_PRODUCT) OVER (PARTITION BY  STORE_ADDRESS ORDER BY PRODUCT_NAME)) 
ORDER BY STORE_ADDRESS,PRODUCT_NAME;

SELECT STORE_ADDRESS,SUM(EXTENDED_TOTAL_VALUE) VALUE_GAINED FROM (SELECT  STORE_ADDRESS,ORDER_STATUS,SUM(SUM(TOTAL_VALUE)) OVER(PARTITION BY ORDER_STATUS, STORE_ADDRESS) EXTENDED_TOTAL_VALUE FROM EXTENDED_ORDER_DETAILS GROUP BY STORE_ADDRESS,ORDER_STATUS) 
WHERE ORDER_STATUS IN ('COMPLETE','OPEN','SHIPPED','PAID') GROUP BY ROLLUP(STORE_ADDRESS);

SELECT STORE_ADDRESS,SUM(EXTENDED_TOTAL_VALUE) VALUE_LOST FROM (SELECT  STORE_ADDRESS,ORDER_STATUS,SUM(SUM(TOTAL_VALUE)) OVER(PARTITION BY ORDER_STATUS, STORE_ADDRESS) EXTENDED_TOTAL_VALUE FROM EXTENDED_ORDER_DETAILS GROUP BY STORE_ADDRESS,ORDER_STATUS) 
WHERE ORDER_STATUS IN ('CANCELLED','REFUNDED') GROUP BY ROLLUP(STORE_ADDRESS);

SELECT GAIN.STORE_ADDRESS,SUM(COALESCE (GAIN.VALUE_GAINED,0)) GAIN,SUM(COALESCE(LOSS.VALUE_LOST,0)) LOSS ,SUM(COALESCE (GAIN.VALUE_GAINED,0)-COALESCE(LOSS.VALUE_LOST,0)) DIFF 
FROM  
(SELECT * FROM (SELECT STORE_ADDRESS,SUM(EXTENDED_TOTAL_VALUE) VALUE_GAINED  
FROM 
(SELECT  STORE_ADDRESS,ORDER_STATUS,SUM(SUM(TOTAL_VALUE)) OVER(PARTITION BY ORDER_STATUS, STORE_ADDRESS) EXTENDED_TOTAL_VALUE FROM EXTENDED_ORDER_DETAILS GROUP BY STORE_ADDRESS,ORDER_STATUS) 
WHERE ORDER_STATUS IN ('COMPLETE','OPEN','SHIPPED','PAID') GROUP BY STORE_ADDRESS)) GAIN  
FULL OUTER JOIN 
(SELECT STORE_ADDRESS,SUM(EXTENDED_TOTAL_VALUE) VALUE_LOST FROM (SELECT  STORE_ADDRESS,ORDER_STATUS,SUM(SUM(TOTAL_VALUE)) OVER(PARTITION BY ORDER_STATUS, STORE_ADDRESS) EXTENDED_TOTAL_VALUE FROM EXTENDED_ORDER_DETAILS GROUP BY STORE_ADDRESS,ORDER_STATUS) 
WHERE ORDER_STATUS IN ('CANCELLED','REFUNDED') GROUP BY STORE_ADDRESS) LOSS  
ON GAIN.STORE_ADDRESS=LOSS.STORE_ADDRESS GROUP BY ROLLUP(GAIN.STORE_ADDRESS);

SELECT  STORE_ADDRESS,ORDER_STATUS,SUM(SUM(TOTAL_VALUE)) OVER(PARTITION BY ORDER_STATUS, STORE_ADDRESS) TOTAL_VALUE FROM EXTENDED_ORDER_DETAILS GROUP BY STORE_ADDRESS,ORDER_STATUS;

SELECT CUSTOMER_ID, STORE_ADDRESS,COUNT(ORDER_ID)  ORDER_COUNT,SUM(TOTAL_VALUE) ORDER_VALUE FROM  EXTENDED_ORDER_DETAILS GROUP BY CUBE(CUSTOMER_ID,STORE_ADDRESS);

SELECT STORE_ADDRESS,ORDER_STATUS,COUNT(ORDER_STATUS),SUM(TOTAL_VALUE) FROM EXTENDED_ORDER_DETAILS GROUP BY ROLLUP (STORE_ADDRESS, ORDER_STATUS);

